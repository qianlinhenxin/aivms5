package com.qlhx.service.wechat.realize.dao;


import com.qlhx.service.wechat.realize.model.AccessRecord;
import com.qlhx.service.wechat.realize.model.VisitorRecord;
import com.qlhx.service.wechat.realize.model.VistorSmsInfo;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface AccessRecordMapper {
    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table u_access_record
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer id) throws Exception;

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table u_access_record
     *
     * @mbggenerated
     */
    int insert(AccessRecord record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table u_access_record
     *
     * @mbggenerated
     */
    int insertSelective(AccessRecord record) throws Exception;

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table u_access_record
     *
     * @mbggenerated
     */
    AccessRecord selectByPrimaryKey(Integer id) throws Exception;

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table u_access_record
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(AccessRecord record);

    /**
     * This method was generated by MyBatis Generator. This method corresponds
     * to the database table u_access_record
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(AccessRecord record);

    /**
     * <p>
     * Title:通过门禁卡查询门禁卡是否被占用
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param cardNum
     * @return
     * @throws Exception
     */
    List<AccessRecord> selectByCardNum(@Param("cardNum") String cardNum)
	    throws Exception;

    /**
     * <p>
     * Title:
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param cardNum
     * @param state
     * @return
     * @throws Exception
     */
    Integer recoverCard(@Param("cardNum") String cardNum,
                        @Param("state") Integer state) throws Exception;

    /**
     * <p>
     * Title:获取指定日期访客出/入数量
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param date
     * @return
     * @throws Exception
     */
    Map<String, Integer> findTodayIntoAndOutNum(@Param("date") String date)
	    throws Exception;

    /**
     * <p>
     * Title:根据访客id查询该访客未被注销的来访
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param visitorId
     * @return
     * @throws Exception
     */
    List<AccessRecord> findRecordingByVisitorId(@Param("vId") Integer visitorId)
	    throws Exception;

    /**
     * <p>
     * Title:根据条件查询访客来访记录信息
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @return
     * @throws Exception
     */
    List<AccessRecord> findAccessRecord(AccessRecord recode) throws Exception;

    /**
     * 
     * <p>
     * Title:根据条件查询访客记录总条数
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param recode
     * @return
     * @throws Exception
     */
    Integer findAccessRecordPageCount(AccessRecord recode) throws Exception;

    /**
     * <p>
     * Title:根据卡号查询正在进行的访问
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param cardNum
     * @return
     * @throws Exception
     */
    AccessRecord findAccessRecordByCardNum(@Param("cardNum") String cardNum)
	    throws Exception;

    /**
     * <p>
     * Title:获取指定条数的未上传到公安网的使用身份证登记的来访记录信息
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param num
     * @return
     * @throws Exception
     */
    List<AccessRecord> findNotUploadAccessRecord(@Param("num") Integer num)
	    throws Exception;

    /**
     * <p>
     * Title:根据访客id查询该访客预约端信息
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param vID
     * @return
     * @throws Exception
     */
    List<AccessRecord> findAccessRecordByVid(@Param("vID") Integer vID)
	    throws Exception;

    /**
     * 
     * <p>
     * Title:根据来访人证件号码查询上次来访信息
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param idNum
     * @return
     * @throws Exception
     */
    AccessRecord findLastAccessRecordByIdNum(@Param("idNum") String idNum)
	    throws Exception;

    AccessRecord findAccessRecordByid(@Param("ID") Integer ID) throws Exception;

    /**
     * 
     * <p>
     * Title:查询指定访客预约信息是否存在
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param r
     * @return 存在返回记录信息，不存在返回null
     * @throws Exception
     */
    List<AccessRecord> isAccessRecord(AccessRecord r) throws Exception;


    /**
     * <p>
     * Title:根据访客ID查询正在进行的访问
     * </p>
     * <p>
     * Description:
     * </p>
     *
     * @param vid
     * @return
     * @throws Exception
     */
    AccessRecord findNowAccessRecordByVid(@Param("vID") Integer vid)
            throws Exception;

    AccessRecord selectAccessRecordByPama(AccessRecord accessRecord) throws Exception;
    
    int updateByCompanyCodeAndId(AccessRecord accessRecord) throws Exception;
    
    List visitorReasonCount(Map param);
    
    List newCountReportByMonth(Map param);
    
    List newCountReportByYear(Map param);   
    
    List visitedDurationByMonth(Map param);
    
    List visitedDurationByYear(Map param);
    
    List policeByMonth(Map param);
    
    List policeByYear(Map param);
    
    List<VisitorRecord> selectByLastCreateTime(@Param("lastCreateTime") String lastCreateTime);
    
    List<VisitorRecord> selectUploadToB();
    
    VistorSmsInfo vistorSmsInfo(Integer id);

}